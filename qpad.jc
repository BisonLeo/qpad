import "text-box.jc"
import "bin-editor.jc"
import "code-editor.jc"
import "code-parser.jc"
import "encoding.jc"
//import "txtx-editor.jc"
//import "zip-doc.jc"
//import "ooc-mipmap.jc"
//import "uisandbox.jc"
import Gui2D.*
import Javascript.*
import System.Console.*
import System.Algorithm.*
//import Uisandbox.*

__generate_json("js_units","gui2d/ui.js")
__generate_json("js_units","gui2d/gl.js")
__generate_json("js_units","gui2d/widgets.js")
__generate_json("js_units","gui2d/dockbar.js")
if Platform.ARCH=="ios":
	__generate_json("icon_file","icon_ios.png")
else
	__generate_json("icon_file","icon256.png")
__generate_json("icon_win","iconwin.ico")
//__generate_json("include_js","build/make_new_docs.js")
//__generate_json("linux_cc","clang")
__generate_json("linux_cc","gcc-5")
if Platform.IS_LINUX:
	__generate_json("ssh_remote_target","~/qpad")
	__generate_json("ssh_server","houqiming@192.168.85.106")
//if Platform.IS_UNIX&&Platform.BUILD!="debug":
//	__generate_json("ldflags","-s")
if Platform.IS_WINDOWS:
	__generate_json("lib_files","shell32.lib")
	__generate_json("lib_files","kernel32.lib")
	__generate_json("lib_files","user32.lib")
	__generate_json("lib_files","gdi32.lib")
	if Platform.BUILD!="debug":
		__generate_json("subsystem","windows")
		__generate_json("c_files","jc_winmain.c")
	__generate_json("vc_versions","11")
//if Platform.ARCH=="win32":
//	//use VC2008 for XP support
//	__generate_json("vc_versions","9")
if Platform.ARCH=="android":
	__generate_json("android_activity_manifest","android:windowSoftInputMode=stateAlwaysHidden|adjustResize")

c_system=__c_function(int,"system","stdlib.h")

auto genString(string s0)
	s=new string
	hex="0123456789ABCDEF"
	foreach ch0 in s0
		ch=int(u8(ch0))
		if ch>=0:
			if ch=='"':
				s.push('\\')
				s.push('"')
			else if ch>=32&&ch<127:
				s.push(char(ch))
			else
				s.push('\\')
				s.push('x')
				s.push(hex[(ch>>4)&15])
				s.push(hex[ch&15])
	return s

if Platform.IS_WINDOWS:
	ExitProcess=__c_function(int,"ExitProcess","windows.h")
	registerUIExtension(function(JSObject JS_UI,CUISandbox sbox,int is_real){
		JS_UI["SDL_GLInitErrorCallback"]=function(JSContext JS){
			MessageBoxA=__c_function(int,"MessageBoxA","windows.h")
			MessageBoxA(NULL,"Your machine doesn't support OpenGL 2.0.\n\nPlease download and extract the LLVMPipe package","Error",0x10)
			ExitProcess(1)
			return 0;
		}
		JS_UI["ShowCompletionNotification"]=function(JSContext JS){
			GetCurrentProcessId=__c_function(int,"GetCurrentProcessId","windows.h")
			pid=GetCurrentProcessId()
			SetForegroundProcess=__c_function(int,"SetForegroundProcess","windows.h")
			return JS.Return(SetForegroundProcess(pid))
		}
	})
if Platform.BUILD=="debug":
	registerUIExtension(function(JSObject JS_UI,CUISandbox sbox,int is_real){
		JS_UI["dumpMemoryUsage"]=function(JSContext JS){
			state_new=LeakDetection.CreateMemorySnapshot()
			Writeln('=== internal memory usage: ',LeakDetection.GetMemoryUsage(),' bytes, ',state_new.n,' allocs')
			state_new.discard()
			return 0
		}
		JS_UI["detectLeaks"]=function(JSContext JS){
			LeakDetection.DetectLeaks()
			return 0
		}
		JS_UI["debugDumpFragmentation"]=function(JSContext JS){
			LeakDetection.AnalyzeFragmentation()
			return 0
		}
		JS_UI["debugDumpHeap"]=function(JSContext JS){
			JS.debugDumpHeap()
			return 0
		}
		JS_UI["debugWipeStash"]=function(JSContext JS){
			JS.debugWipeStash()
			return 0
		}
	})

(function(){
	//Gui2D.ProvideGLFunctions()
	JS=new JSContext
	JS_script_sandbox=new JSContext
	sbox=setupModuleSystem(JS,1)
	if Platform.IS_MOBILE:
		sbox.UILoadZip(string.NULL)
	else
		sbox.UILoadStaticZip()
	/////////////
	jsio=JS.New()
	JS.GetGlobal()["IO"]=jsio
	jsio["ReadAll"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		ret=System.IO.ReadAll(fn)
		if !ret:
			return 0
		else
			//return JS.Return(new(ret))
			return JS.Return(ret)
	}
	jsio["UIReadAll"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		ret=sbox.UIReadAll(fn)
		if !ret:
			return 0
		else
			return JS.Return(ret)
	}
	jsio["ReadLimited"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		sz=JS.Param(1).as(iptr)
		if !fn||!(sz>0):return 0
		auto f=System.IO.OpenFile(fn)
		if f:
			auto s=f.Read(sz)
			f.Close()
			return JS.Return(s)
		else
			return 0
	}
	jsio["CreateFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		data_u8=JS.Param(1).as(u8[])
		if data_u8:
			data=data_u8.ConvertToAsBinary(i8)
		else
			data=JS.Param(1).or(new string)
		f=System.IO.CreateFile(fn)
		if f:
			lg=f.Write(data)
			f.Close()
			return JS.Return(lg)
		else
			return 0
	}
	jsio["DeleteFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		return JS.Return(System.IO.DeleteFile(fn))
	}
	jsio["GetFileTimestamp"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		foreach fn,fi in System.IO.EnumFiles(fn,System.IO.ENUM_FILE)
			return JS.Return(fi.latest_time())
		return 0
	}
	jsio["FileExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.FileExists(fn))
	}
	jsio["DirExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.DirExists(fn))
	}
	jsio["ProcessUnixFileName"]=function(JSContext JS){
		fn0=JS.Param(0).as(string)
		if !fn0:
			return 0
		else
			if Platform.IS_UNIX:
				if fn0.StartsWith("~"):
					fn0="${HOME}"+fn0[1:]
			else if Platform.IS_WINDOWS:
				if fn0.StartsWith("~"):
					fn0="%UserProfile%"+fn0[1:]
			return JS.Return(System.Env.ExpandEnvironmentStrings(fn0))
	}
	jsio["GetEnvironmentVariable"]=function(JSContext JS){
		s=JS.Param(0).as(string)
		if !s:
			return 0
		else
			return JS.Return(System.Env.GetEnvironmentVariable(s))
	}
	jsio["NormalizeFileName"]=function(JSContext JS){
		fn0=JS.Param(0).as(string)
		is_win_cased=JS.Param(1).or(0)
		if !fn0:return 0
		if Platform.IS_WINDOWS&&is_win_cased:
			foreach fn in System.IO.EnumFiles(fn0,System.IO.ENUM_FILE)
				return JS.Return(fn)
		return JS.Return(System.Env.NormalizeFileName(fn0))
	}
	jsio["CreateEnumFileContext"]=function(JSContext JS){
		fn0=JS.Param(0).as(string)
		flags=JS.Param(1).or(0)
		if !fn0:return 0
		fnextfile=System.IO.CreateEnumFileContext(fn0,flags)
		//we cannot create new functions willy-nilly!
		return JS.Return(function(JSContext JS){
			auto fn
			auto fi
			(fn,fi)=fnextfile()
			if !fn:return 0
			ret=JS.New()
			ret["name"]=fn
			ret["size"]=fi.size
			ret["attr"]=fi.attr
			ret["is_dir"]=fi.is_dir()
			ret["time"]=System.Time.ToLocalTime(i64(fi.latest_time()))
			return JS.Return(ret)
		})
	}
	jsio["WallClockTime"]=function(JSContext JS){
		return JS.Return(System.Time.ToLocalTime(System.Time.WallClockTime()))
	}
	/////////////
	dname_base=0
	jsio["GetNewDocumentName"]=function(JSContext JS){
		fn_base=JS.Param(0).as(string)
		s_ext=JS.Param(1).as(string)
		s_path_hint=JS.Param(2).or("document")
		if s_path_hint=="temp":
			return JS.Return(System.Env.GetTempFileName(s_ext))
		if Platform.IS_WINDOWS:
			s_userdir=System.Env.ExpandEnvironmentStrings(string("%USERPROFILE%"))
			if !s_userdir.n||s_userdir[0]=='%':
				s_userdir=System.Env.ExpandEnvironmentStrings(string("%SystemDrive%%HOMEPATH%"))
			if s_path_hint=="pictures":
				s_userdir.push("\\Pictures")
			else
				s_userdir.push("\\Documents")
			if !System.IO.DirExists(s_userdir):
				//no "My Pictures"
				s_userdir=new(".")
			else
				s_userdir=s_userdir.Replace(["\\","/"])
		else
			s_userdir=System.Env.ExpandEnvironmentStrings("${HOME}")
		if !fn_base||!s_ext:
			return JS.Return(s_userdir)
		if s_userdir.n&&s_userdir.back()=='/':
			fn_base=s_userdir+fn_base
		else
			fn_base=s_userdir+"/"+fn_base
		for(;;)
			fn=FormatAsText(fn_base,formatNumber(dname_base,{base:16,align:4}),".",s_ext)
			dname_base++
			if System.IO.FileExists(fn):continue
			return JS.Return(fn)
	}
	jsio["GetExecutablePath"]=function(JSContext JS){
		if Platform.IS_MOBILE:
			return 0
		else
			return JS.Return(System.Env.GetExecutablePath())
	}
	jsio["GetFileSize"]=function(JSContext JS){
		fn=JS.Param(0).as(string)
		return JS.Return(System.IO.GetFileSize(fn))
	}
	jsio["m_my_name"]=System.Env.GetExecutableName()
	jsio["m_argv"]=System.Console.GetCommandLine()
	jsio["GetStoragePath"]=function(JSContext JS){
		return JS.Return(System.Env.GetStoragePath())
	}
	/////////////
	if Platform.IS_WINDOWS:
		jsio["GetPID"]=function(JSContext JS){
			GetCurrentProcessId=__c_function(int,"GetCurrentProcessId","windows.h")
			return JS.Return(GetCurrentProcessId());
		}
	else
		jsio["GetPID"]=function(JSContext JS){
			getpid=__c_function(iptr,"getpid","unistd.h")
			return JS.Return(getpid());
		}
	if Platform.IS_WINDOWS:
		//osal_DoFileDialogWin=__c_function(int,"osal_DoFileDialogWin","filedlg.h","c_files","filedlg.c")
		//__generate_json("lib_files","comdlg32.lib")
		jsio["WIN_SHChangeNotify"]=function(JSContext JS){
			SHChangeNotify=__c_function(int,"SHChangeNotify","Shlobj.h")
			SHCNE_ASSOCCHANGED=0x8000000
			SHCNF_IDLIST=0
			SHChangeNotify(SHCNE_ASSOCCHANGED,SHCNF_IDLIST,NULL,NULL);
			return 0;
		}
		jsio["IsFirstInstance"]=function(JSContext JS){
			OpenMutex=__c_function(__pointer,"OpenMutexA","windows.h")
			CreateMutex=__c_function(__pointer,"CreateMutexA","windows.h")
			CloseHandle=__c_function(int,"CloseHandle","windows.h")
			s_mutex_name=JS.Param(0).asCString()
			MUTEX_ALL_ACCESS= 0x1f0001
			handle=OpenMutex(MUTEX_ALL_ACCESS,0,s_mutex_name);
			if !handle:
				CreateMutex(0,0,s_mutex_name)
				return JS.Return(1)
			else
				CloseHandle(handle)
				return 0
		}
		jsio["SetForegroundProcess"]=function(JSContext JS){
			__C(int,"@global:
			BOOL CALLBACK sfp_enumproc(HWND hw,LPARAM lp){
				if (IsWindowVisible(hw) && !GetParent(hw) && !GetWindow(hw,GW_OWNER)){
					int pid=0;
					GetWindowThreadProcessId(hw,&pid);
					if(pid==lp){
						SetForegroundWindow(hw);
						if(IsIconic(hw)){
							ShowWindow(hw,SW_SHOWNORMAL);
						}
						return 0;
					};
				}
				return 1;
			}
			int SetForegroundProcess(int pid){
				return !EnumWindows(sfp_enumproc,pid);
			}");
			pid=JS.Param(0).as(int)
			SetForegroundProcess=__c_function(int,"SetForegroundProcess","windows.h")
			return JS.Return(SetForegroundProcess(pid))
		}
		jsio["GetUserLanguage"]=function(JSContext JS){
			GetUserDefaultUILanguage=__c_function(int,"GetUserDefaultUILanguage","windows.h")
			sret="en_us"
			langid=GetUserDefaultUILanguage()
			if (langid&0x3ff)==4:
				//Chinese
				if langid!=2052&&langid!=4:
					sret="zh_tw"
				else
					sret="zh_cn"
			else if (langid&0x3ff)==0x11:
				sret="ja_jp"
			return JS.Return(sret)
		}
	else if Platform.ARCH=="mac":
		//osal_DoFileDialogMac=__c_function(int,"osal_DoFileDialogMac","filedlg.h","c_files","filedlg_mac.m")
		//__generate_json("mac_frameworks","System/Library/Frameworks/AppKit.framework")
	if Platform.IS_MOBILE||Platform.ARCH=="rasppi":
		jsio["DoFileDialog"]=function(JSContext JS){
			return 0
		}
	else
		jsio["DoFileDialog"]=function(JSContext JS){
			is_save=JS.Param(0).or(0)
			sfilters=JS.Param(1).as(string)
			spath=JS.Param(2).as(string)
			return JS.Return(DoFileDialog(is_save,sfilters,spath))
		}
	/////////////
	auto shellcmd(JSObject shell_args,int do_system)
		if !shell_args:
			return JS.ReturnError("invalid shell arguments - it must be an object")
		//properly quote the args
		n=shell_args.length()
		if !(n>0):
			return JS.ReturnError("invalid shell arguments - it must be an array object of positive length")
		scmd=new string
		for i=0:n-1
			s_args_i=shell_args[i].as(string)
			if Platform.IS_WINDOWS:
				if !i:s_args_i=s_args_i.Replace(["/","\\"])
			if s_args_i.IndexOf(' ')>=0||s_args_i.IndexOf('&')>=0:
				s_args_i="\""+genString(s_args_i)+"\""
			if i:scmd.push(' ')
			scmd.push(s_args_i)
		if do_system:
			scmd.push(char(0))
			return JS.Return(c_system(scmd))
		else
			return JS.Return(scmd)
	jsio["Shell"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,1)
	}
	jsio["ShellCmd"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,0)
	}
	/////////////
	class CProcessWrapper
		System.Processes.CProcess proc
		JS_Read=function(JSContext JS){
			auto n=JS.Param(0).as(iptr)
			if proc.pipe.WouldBlock():return 0
			//line-based parsing? do it in JS
			s=proc.pipe.Read(n)
			if Platform.IS_WINDOWS:
				s=Encoding.OSConvertString(0,"",s)
			//System.Algorithm.NativeToUtf8()
			return JS.Return(s)
		}
		JS_IsRunning=function(JSContext JS){
			return JS.Return(proc.isRunning())
		}
		JS_ExitCode=function(JSContext JS){
			return JS.Return(proc.exit_code())
		}
		JS_Terminate=function(JSContext JS){
			proc.Terminate()
			return 0
		}
		__JS_prototype=function(JSObject proto){
			proto.ExportMethod(this,"Read",JS_Read)
			proto.ExportMethod(this,"GetExitCode",JS_ExitCode)
			proto.ExportMethod(this,"IsRunning",JS_IsRunning)
			proto.ExportMethod(this,"Terminate",JS_Terminate)
		}
	jsio["RunProcess"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		auto spath=JS.Param(1).or(".")
		auto show=JS.Param(2).or(1)
		n=shell_args["length"].as(iptr)
		args=[shell_args[i].as(string) for i=0:n-1]
		pproc=System.Processes.Run(args,spath,show,"new_job,new_console")
		if !pproc:
			//job object creation may fail
			pproc=System.Processes.Run(args,spath,show,"new_console")
		if !pproc:
			return 0
		return JS.Return(new CProcessWrapper(){proc:pproc})
	}
	jsio["RunToolRedirected"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		auto spath=JS.Param(1).or(".")
		auto show=JS.Param(2).or(1)
		auto n=shell_args.length()
		auto args=[shell_args[i].as(string) for i=0:n-1]
		foreach s,I in args
			if !s:
				return JS.ReturnError("bad args")
		pproc=System.Processes.RunPiped(args,spath,show,"new_job,output,error")
		if !pproc:
			//job object creation may fail
			pproc=System.Processes.RunPiped(args,spath,show,"output,error")
		if !pproc:
			return 0
		return JS.Return(new CProcessWrapper(){proc:pproc})
	}
	/////////////
	Duktape=JS.GetGlobal()["Duktape"].as(JSObject)
	Duktape["__utf8_fromCharCode"]=function(JSContext JS){
		ch=JS.Param(0).or(0)
		return JS.Return(System.Algorithm.Unicode32ToUtf8([ch]))
	}
	Duktape["__commonPrefixLength"]=function(JSContext JS){
		s0=JS.Param(0).or("")
		s1=JS.Param(1).or("")
		lg=0L
		for i=0:min(s0.n,s1.n)-1
			if s0[i]!=s1[i]:break
			lg=i+1
		return JS.Return(lg)
	}
	Duktape_sandbox=JS_script_sandbox.GetGlobal()["Duktape"].as(JSObject)
	JS_script_sandbox.evalVoid("Duktape.__eval_expr=function(){try{var ret=JSON.stringify(eval(Duktape.__code));Duktape.__error=undefined;return ret;}catch(e){Duktape.__error=e.message;return undefined;}}","<eval-sandbox>")
	Duktape["__eval_expr_sandbox"]=function(JSContext JS){
		s=JS.Param(0).as(string)
		Duktape_sandbox["__code"]=s;
		s_ret=JS_script_sandbox.eval(string,"Duktape.__eval_expr()")
		if s_ret:
			return JS.Return(s_ret)
		else
			s_error=Duktape_sandbox["__error"].as(string)
			if s_error:
				return JS.ReturnError(s_error)
		return 0
	}
	/////////////
	s_storage_path=System.Env.GetStoragePath()
	{
		if !System.IO.DirExists(s_storage_path+"/dict"):
			System.IO.CreateDirectory(s_storage_path+"/dict")
		if !System.IO.FileExists(s_storage_path+"/dict/en_us.aff")
			auto f=System.IO.CreateFile(s_storage_path+"/dict/en_us.aff")
			if f:
				auto s=sbox.UIReadAll("res/misc/dict/en_us.aff")
				f.Write(s)
				f.Close()
		if !System.IO.FileExists(s_storage_path+"/dict/en_us.dic")
			auto f=System.IO.CreateFile(s_storage_path+"/dict/en_us.dic")
			if f:
				auto s=sbox.UIReadAll("res/misc/dict/en_us.dic")
				f.Write(s)
				f.Close()
	}
	Gui2D.g_log_file=s_storage_path+"/log.txt"
	sbox.UIRunJS(JS,"res/main.js")
	//if Platform.IS_WINDOWS&&System.IO.FileExists(System.Env.GetExecutablePath()+"/opengl32.dll"):
	//	//LLVMPipe tends to crash
	//	ExitProcess(1)
})()
