import "gui2d.jc"
import "system.jc"
import Gui2D.detail.*
import System.Algorithm.*
import System.Console.*

//for iPad... we need to be static
HSPELLER=__pointer
__generate_json("c_files","hunspell/affentry.cxx");
__generate_json("c_files","hunspell/affixmgr.cxx");
__generate_json("c_files","hunspell/csutil.cxx");
__generate_json("c_files","hunspell/dictmgr.cxx");
__generate_json("c_files","hunspell/filemgr.cxx");
__generate_json("c_files","hunspell/hashmgr.cxx");
__generate_json("c_files","hunspell/hunspell.cxx");
__generate_json("c_files","hunspell/hunzip.cxx");
__generate_json("c_files","hunspell/phonet.cxx");
__generate_json("c_files","hunspell/replist.cxx");
__generate_json("c_files","hunspell/suggestmgr.cxx");
__generate_json("c_files","hunspell/hunspelldll.cxx");

__generate_json("h_files","hunspell/affentry.hxx");
__generate_json("h_files","hunspell/affixmgr.hxx");
__generate_json("h_files","hunspell/atypes.hxx");
__generate_json("h_files","hunspell/baseaffix.hxx");
__generate_json("h_files","hunspell/csutil.hxx");
__generate_json("h_files","hunspell/dictmgr.hxx");
__generate_json("h_files","hunspell/filemgr.hxx");
__generate_json("h_files","hunspell/hashmgr.hxx");
__generate_json("h_files","hunspell/htypes.hxx");
__generate_json("h_files","hunspell/hunspell.hxx");
__generate_json("h_files","hunspell/hunspell.h");
__generate_json("h_files","hunspell/hunzip.hxx");
__generate_json("h_files","hunspell/langnum.hxx");
__generate_json("h_files","hunspell/phonet.hxx");
__generate_json("h_files","hunspell/replist.hxx");
__generate_json("h_files","hunspell/suggestmgr.hxx");
__generate_json("h_files","hunspell/w_char.hxx");
__generate_json("h_files","hunspell/hunspelldll.h");
__generate_json("h_files","hunspell/config.h");
__generate_json("h_files","hunspell/hunvisapi.h");
__generate_json("h_files","hunspell/utf_info.cxx");

//coulddo: do we call hunspell_free_list?
Hunspell_create=__c_function(HSPELLER,"hunspell_initialize","hunspelldll.h")
Hunspell_add=__c_function(int,"hunspell_add","hunspelldll.h")
Hunspell_remove=__c_function(int,"hunspell_remove","hunspelldll.h")
Hunspell_spell=__c_function(int,"hunspell_spell","hunspelldll.h")
Hunspell_suggest=__c_function(int,"hunspell_suggest","hunspelldll.h")
Hunspell_free_list=__c_function(int,"hunspell_free_list","hunspelldll.h")
Hunspell_destroy=__c_function(int,"hunspell_uninitialize","hunspelldll.h")

g_suggs=NULL
g_tried_to_init=0
g_spellers=new HSPELLER[string]

auto getSpeller(string lang)
	if !lang||!lang.n:return NULL
	//if !isAvailable():return NULL
	ret=g_spellers[lang]
	if !ret:
		//exepath=System.Env.GetExecutablePath()+("dict/")
		exepath=System.Env.GetStoragePath()+("/dict/")
		sa=exepath+lang+(".aff\0")
		sb=exepath+lang+(".dic\0")
		if System.IO.FileExists(sa[:sa.n-2]):
			ret=Hunspell_create(sa,sb)
		else
			ret=NULL
		g_spellers[lang]=ret
		if ret:
			sc=exepath+lang+(".user_dic")
			s2=System.IO.ReadAll(sc)
			if s2:
				foreach s3_real in s2.Tokenize(" \t\n")
					s3=s3_real+"\0"
					if s3[0]=='-':
						Hunspell_remove(ret,__pointer(s3.d+1L))
					else
						Hunspell_add(ret,s3)
	return ret

auto spell(HSPELLER hun,string s)
	//allow: LaTeX '', numberic starter, asian starter
	//if s[0]>='0'&&s[0]<='9'||s=="'"||s.n>=2&&s[s.n-1]=='\''&&s[s.n-2]=='\'':return 1
	if s[0]>='0'&&s[0]<='9':return 1
	return Hunspell_spell(hun,s)

auto addWord(HSPELLER hun,string lang,string s0)
	//exepath=System.Env.GetExecutablePath()+("dict/")
	exepath=System.Env.GetStoragePath()+("/dict/")
	sc=exepath+lang+(".user_dic")
	f=System.IO.OpenFile(sc,System.IO.OPEN_READ+System.IO.OPEN_WRITE)
	if !f:f=System.IO.CreateFile(sc)
	if !f:
		return 0
	else
		f.SeekFromEnd(0)
		f.Write(s0+"\n")
		f.Close()
	s=s0+"\0"
	if s[0]=='-':
		ret=!Hunspell_remove(hun,__pointer(s.d+1L))
	else
		ret=!Hunspell_add(hun,s)
	return ret

auto remove(HSPELLER hun,string lang,string s)
	return addWord(hun,lang,string("-")+s)

auto suggest(HSPELLER hun,string s)
	n=Hunspell_suggest(hun,s+"\0",__C(__pointer,"(char***)(@1)",&g_suggs))
	ret=new string[n]
	for i=0:n-1
		ret[i]=System.detail.pcharToString(__memory(__pointer,iptr(g_suggs)+sizeof(iptr)*i))
	Hunspell_free_list(hun,__C(__pointer,"(char***)(@1)",&g_suggs),n)
	g_suggs=NULL
	return ret
