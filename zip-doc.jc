import "javascript.jc"
import "gui2d.jc"
import System.Math.*
import System.Algorithm.*
import System.Console.*
import Gui2D.detail.*
import Javascript.*

/*
id -> object
	with JS callbacks
		Save -> get a string
			the file name is per-determined by id
			id should be gced
			or just use native references?
				dfs to obtain the set of saved objects
				create name upon saving
		GetReferences
		__unique_id
Load
Save
*/
stbi_zlib_compress=__c_function(__pointer,"stbi_zlib_compress","stb_image_write.h", "c_files","stb_image_write.c")
stbiw__crc32=__c_function(u32,"stbiw__crc32","stb_image_write.h", "c_files","stb_image_write.c")

auto zip(string s)
	out_len=0
	s_ret=stbi_zlib_compress(s,s.n,&out_len,8)
	if !s_ret:return string.NULL
	ret=new string
	ret.d=iptr(s_ret)
	ret.n=iptr(out_len)
	ret.sz=ret.n
	return ret[2:]//strip the header

inline crc32(string s){return stbiw__crc32(s,s.n)}

auto SaveZipDocument(System.IO.CFile fzip,JSObject obj_root)
	//JS=obj_root.GetContext()
	//JS.GetGlobal()["UI"]["SaveObject"]
	g_unique_id=0LL
	sz_written=0L
	sz_data=0L
	inline writeZip(string s)
		sz_data+=s.n
		sz_written+=fzip.Write(s)
		if sz_written<sz_data:
			return 0
		else
			return 1
	objs=new JSObject[]
	idmap=new JSObject[i64]
	auto dfsObject(JSObject obj)
		id_obj=obj["__unique_id"].or(-1LL)
		if id_obj==-1LL:
			id_obj=g_unique_id;g_unique_id++
			obj["__unique_id"]=id_obj
		if idmap[id_obj]:return
		idmap[id_obj]=obj
		objs.push(obj)
		children=obj.CallMethod(JSObject,"GetReferences")
		if children:
			for i=0:children.length()-1
				obj_i=children[i].as(JSObject)
				if obj_i:
					dfsObject(obj_i)
	dfsObject(obj_root)
	s_central=new string
	nfiles=0
	foreach obj in objs
		id_obj=obj["__unique_id"].or(-1LL)
		//Save accesses __unique_id of dependencies
		s_save=obj.CallMethod(string,"Save")
		if !s_save:
			Writeln('error saving JS object ',id_obj)
			assert(0)
		sz_original=s_save.n
		//the compression doesn't work yet
		enable_compression=obj["enable_compression"].or(0)
		crc=int(crc32(s_save))
		if enable_compression:
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
			fdata=zip(s_save)
		else
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
			fdata=s_save
		//CRC-32, size, size, namelen, paddinglen, name, padding
		fn_zip=formatNumber(id_obj,{base:16,align:4})+"."+obj["default_extension"].or("bin")
		s_local.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n)].ConvertToAsBinary(char))
		//ppaddings=s_local.n-2
		s_local.push(fn_zip)
		//lg_padding=(-(fzip.Position()+s_local.n))&(ALIGNMENT-1)
		//s_local[ppaddings]=lg_padding
		//if lg_padding:
		//	s_local.resize(s_local.n+lg_padding)
		plocal=fzip.Position()
		if !writeZip(s_local):return 0
		if !writeZip(fdata):return 0
		//add its central directory
		if enable_compression:
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
		else
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
		s_central.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n),0,0].ConvertToAsBinary(char))
		s_central.push('\0')
		s_central.push('\0')
		s_central.push([int(plocal)].ConvertToAsBinary(char))
		s_central.push(fn_zip)
		nfiles++
		fdata.discard()
	//wipe __unique_id for the next save
	foreach obj in objs
		obj["__unique_id"]=-1LL
	//write the new directory
	p_central=fzip.Position()
	s_central.push("PK\x05\x06\x00\x00\x00\x00")
	s_central.push([int(nfiles)*0x00010001,int(s_central.n),int(p_central)].ConvertToAsBinary(char))
	s_central.push("\x00\x00")
	if !writeZip(s_central):return 0
	return 1

auto LoadZipDocument(JSContext JS,string fname)
	/*
	native zip reader calls LOADER.ParseObject to get an array
	then call SetReferences on each object with that array
	*/
	sraw=System.IO.ReadAll(fname)
	if !sraw:return JSObject.NULL
	zipfile=ParseZip(sraw)
	if !zipfile:return JSObject.NULL
	oid_to_sdata=new string[int]
	omax=-1
	foreach fn in zipfile.AllFileNames()
		pdot=fn.LastIndexOf('.')
		oid=fn[:pdot-1].asHex(int)
		if oid_to_sdata[oid]:return JSObject.NULL
		sdata=zipfile.ReadAll(fn)
		if !sdata:return JSObject.NULL
		oid_to_sdata[oid]=sdata
		omax=max(omax,oid)
	omax++
	data_list=JS.NewArray()
	for i=0:omax-1
		sdata_i=oid_to_sdata[i]
		if !sdata_i:return JSObject.NULL
		data_list[i]=sdata_i
	return data_list

registerUIExtension(function(JSObject JS_UI,CUISandbox sbox,int is_real){
	JS_UI["SaveZipDocument"]=function(JSContext JS){
		sfile=JS.Param(0).as(string)
		obj=JS.Param(1).as(JSObject)
		if !sfile||!obj:return 0
		fzip=System.IO.CreateFile(sfile)
		if !fzip:return 0
		return JS.Return(SaveZipDocument(fzip,obj))
	}
	JS_UI["LoadZipDocument"]=function(JSContext JS){
		fname=JS.Param(0).as(string)
		if !fname:return 0
		data_list=LoadZipDocument(JS,fname)
		return JS.Return(data_list)
	}
})
