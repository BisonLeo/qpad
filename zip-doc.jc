import "javascript.jc"
import "gui2d.jc"
import System.Math.*
import System.Algorithm.*
import System.Console.*
import Gui2D.detail.*
import Javascript.*

/*
id -> object
	with JS callbacks
		Save -> get a string
			the file name is per-determined by id
			id should be gced
			or just use native references?
				dfs to obtain the set of saved objects
				create name upon saving
		GetReferences
		__unique_id
Load
Save
*/
stbi_zlib_compress=__c_function(__pointer,"stbi_zlib_compress","stb_image_write.h", "c_files","stb_image_write.c")
stbiw__crc32=__c_function(u32,"stbiw__crc32","stb_image_write.h", "c_files","stb_image_write.c")

auto zip(string s)
	out_len=0
	s_ret=stbi_zlib_compress(s,s.n,&out_len,8)
	if !s_ret:return string.NULL
	ret=new string
	ret.d=iptr(s_ret)
	ret.n=iptr(out_len)
	ret.sz=ret.n
	return ret[2:]//strip the header

inline crc32(string s){return stbiw__crc32(s,s.n)}

auto SaveZipDocument(System.IO.CFile fzip,JSObject objs)
	//JS=obj_root.GetContext()
	//JS.GetGlobal()["UI"]["SaveObject"]
	sz_written=0L
	sz_data=0L
	inline writeZip(string s)
		sz_data+=s.n
		sz_written+=fzip.Write(s)
		if sz_written<sz_data:
			return 0
		else
			return 1
	s_central=new string
	nfiles=objs.length()
	for id_obj=0:nfiles-1
		obj=objs[id_obj].as(JSObject)
		s_save=obj.CallMethod(string,"Save")
		if !s_save:
			Writeln('error saving JS object ',id_obj)
			assert(0)
		sz_original=s_save.n
		//the compression doesn't work yet
		enable_compression=obj["enable_compression"].or(0)
		crc=int(crc32(s_save))
		if enable_compression:
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
			fdata=zip(s_save)
		else
			s_local=new("PK\x03\x04\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
			fdata=s_save
		//CRC-32, size, size, namelen, paddinglen, name, padding
		fn_zip=formatNumber(id_obj,{base:16,align:4})+"."+obj["default_extension"].or("bin")
		s_local.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n)].ConvertToAsBinary(char))
		//ppaddings=s_local.n-2
		s_local.push(fn_zip)
		//lg_padding=(-(fzip.Position()+s_local.n))&(ALIGNMENT-1)
		//s_local[ppaddings]=lg_padding
		//if lg_padding:
		//	s_local.resize(s_local.n+lg_padding)
		plocal=fzip.Position()
		if !writeZip(s_local):return 0
		if !writeZip(fdata):return 0
		//add its central directory
		if enable_compression:
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x08\x00\x0C\x93\xC8D")
		else
			s_central.push("PK\x01\x02\x0A\x00\x0A\x00\x00\x00\x00\x00\x0C\x93\xC8D")
		s_central.push([crc,int(fdata.n),int(sz_original),int(fn_zip.n),0,0].ConvertToAsBinary(char))
		s_central.push('\0')
		s_central.push('\0')
		s_central.push([int(plocal)].ConvertToAsBinary(char))
		s_central.push(fn_zip)
		fdata.discard()
	//write the new directory
	p_central=fzip.Position()
	s_central.push("PK\x05\x06\x00\x00\x00\x00")
	s_central.push([int(nfiles)*0x00010001,int(s_central.n),int(p_central)].ConvertToAsBinary(char))
	s_central.push("\x00\x00")
	if !writeZip(s_central):return 0
	return 1

class CLazyLoadedZipDocument
	m_fnames=new string[int]
	CZipFile m_zip
	int n
	JS_ReadObject=function(JSContext JS){
		id=JS.Param(0).as(int)
		fname=m_fnames[id]
		if !fname:return 0
		pdot=fname.LastIndexOf('.')
		sext=fname[pdot+1:]
		ret=JS.New()
		ret["data"]=m_zip.ReadAll(fname)
		ret["ext"]=sext
		return JS.Return(ret)
	}
	__JS_prototype=function(JSObject proto){
		proto.ExportProperty(this,"n")
		proto.ExportMethod(this,"ReadObject",JS_ReadObject)
	}
	
auto LoadZipDocument(JSContext JS,string fname)
	/*
	native zip reader calls LOADER.ParseObject to get an array
	then call SetReferences on each object with that array
	*/
	sraw=System.IO.ReadAll(fname)
	if !sraw:return CLazyLoadedZipDocument.NULL
	zipfile=ParseZip(sraw)
	if !zipfile:return CLazyLoadedZipDocument.NULL
	//oid_to_sdata=new string[int]
	//oid_to_ext=new string[int]
	ret=new CLazyLoadedZipDocument
	ret.m_zip=zipfile
	oid_max=-1
	foreach fn in zipfile.AllFileNames()
		pdot=fn.LastIndexOf('.')
		if pdot<0:return CLazyLoadedZipDocument.NULL
		oid=fn[:pdot-1].asHex(int)
		if ret.m_fnames[oid]:return CLazyLoadedZipDocument.NULL
		ret.m_fnames[oid]=fn
		oid_max=max(oid_max,oid)
	ret.n=oid_max+1
	if ret.n>=1048576:return CLazyLoadedZipDocument.NULL
	for i=0:ret.n-1
		if !ret.m_fnames[i]:return CLazyLoadedZipDocument.NULL
	return ret

registerUIExtension(function(JSObject JS_UI,CUISandbox sbox,int is_real){
	JS_UI["SaveZipDocument"]=function(JSContext JS){
		sfile=JS.Param(0).as(string)
		objs=JS.Param(1).as(JSObject)
		if !sfile||!objs:return 0
		fzip=System.IO.CreateFile(sfile)
		if !fzip:return 0
		return JS.Return(SaveZipDocument(fzip,objs))
	}
	JS_UI["_LoadZipDocument"]=function(JSContext JS){
		fname=JS.Param(0).as(string)
		if !fname:return 0
		return JS.Return(LoadZipDocument(JS,fname))
	}
})
