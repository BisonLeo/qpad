import "text-box.jc"
import "code-editor.jc"
import "code-parser.jc"
//import "txtx-editor.jc"
import "zip-doc.jc"
import "ooc-mipmap.jc"
import "uisandbox.jc"
import Gui2D.*
import Javascript.*
import System.Console.*
import System.Algorithm.*
import Uisandbox.*

__generate_json("js_units","gui2d/ui.js")
__generate_json("js_units","gui2d/gl.js")
__generate_json("js_units","gui2d/widgets.js")
__generate_json("js_units","gui2d/dockbar.js")
__generate_json("icon_file","icon256.png")
__generate_json("include_js","build/make_new_docs.js")
//__generate_json("linux_cc","clang")

c_system=__c_function(int,"system","stdlib.h")

auto genString(string s0)
	s=new string
	hex="0123456789ABCDEF"
	foreach ch0 in s0
		ch=int(u8(ch0))
		if ch>=0:
			if ch=='"':
				s.push('\\')
				s.push('"')
			else if ch>=32&&ch<127:
				s.push(char(ch))
			else
				s.push('\\')
				s.push('x')
				s.push(hex[(ch>>4)&15])
				s.push(hex[ch&15])
	return s

(function(){
	Gui2D.ProvideGLFunctions()
	JS=new JSContext
	sbox=setupModuleSystem(JS,1)
	sbox.UILoadZip(string.NULL)
	/////////////
	jsio=JS.New()
	JS.GetGlobal()["IO"]=jsio
	jsio["ReadAll"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		ret=System.IO.ReadAll(fn)
		if !ret:
			return 0
		else
			//return JS.Return(new(ret))
			return JS.Return(ret)
	}
	jsio["UIReadAll"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		ret=sbox.UIReadAll(fn)
		if !ret:
			return 0
		else
			return JS.Return(ret)
	}
	jsio["CreateFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		data=JS.Param(1).or(new string)
		f=System.IO.CreateFile(fn)
		if f:
			lg=f.Write(data)
			f.Close()
			return JS.Return(lg)
		else
			return 0
	}
	jsio["DeleteFile"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		if !fn:return 0
		return JS.Return(System.IO.DeleteFile(fn))
	}
	jsio["GetFileTimestamp"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		foreach fn,fi in System.IO.EnumFiles(fn,System.IO.ENUM_FILE)
			return JS.Return(fi.latest_time())
		return 0
	}
	jsio["FileExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.FileExists(fn))
	}
	jsio["DirExists"]=function(JSContext JS){
		fn=JS.Param(0).or(new string)
		return JS.Return(System.IO.DirExists(fn))
	}
	jsio["ProcessUnixFileName"]=function(JSContext JS){
		fn0=JS.Param(0).as(string)
		if !fn0:return 0
		if Platform.IS_UNIX:
			if fn0.StartsWith("~"):
				fn0="${HOME}"+fn0[1:]
		return JS.Return(System.Env.ExpandEnvironmentStrings(fn0))
	}
	jsio["CreateEnumFileContext"]=function(JSContext JS){
		fn0=JS.Param(0).as(string)
		flags=JS.Param(1).or(0)
		if !fn0:return 0
		fnextfile=System.IO.CreateEnumFileContext(fn0,flags)
		return JS.Return(function(JSContext JS){
			auto fn
			auto fi
			(fn,fi)=fnextfile()
			if !fn:return 0
			ret=JS.New()
			ret["name"]=fn
			ret["size"]=fi.size
			ret["attr"]=fi.attr
			ret["is_dir"]=fi.is_dir()
			ret["time"]=System.Time.ToLocalTime(i64(fi.latest_time()))
			return JS.Return(ret)
		})
	}
	jsio["WallClockTime"]=function(JSContext JS){
		return JS.Return(System.Time.ToLocalTime(System.Time.WallClockTime()))
	}
	/////////////
	dname_base=0
	jsio["GetNewDocumentName"]=function(JSContext JS){
		fn_base=JS.Param(0).as(string)
		s_ext=JS.Param(1).as(string)
		s_path_hint=JS.Param(2).or("document")
		if s_path_hint=="temp":
			return JS.Return(System.Env.GetTempFileName(s_ext))
		//todo: per-platform s_path_hint translation
		if Platform.IS_WINDOWS:
			s_userdir=System.Env.ExpandEnvironmentStrings(string("%USERPROFILE%"))
			if !s_userdir.n||s_userdir[0]=='%':
				s_userdir=System.Env.ExpandEnvironmentStrings(string("%SystemDrive%%HOMEPATH%"))
			if s_path_hint=="pictures":
				s_userdir.push("\\Pictures")
			else
				s_userdir.push("\\Documents")
			if !System.IO.DirExists(s_userdir):
				//no "My Pictures"
				s_userdir=new(".")
			else
				s_userdir=s_userdir.Replace(["\\","/"])
		else
			s_userdir=System.Env.GetStoragePath()
		if !fn_base||!s_ext:
			return JS.Return(s_userdir)
		fn_base=s_userdir+"/"+fn_base
		for(;;)
			fn=FormatAsText(fn_base,formatNumber(dname_base,{base:16,align:4}),".",s_ext)
			dname_base++
			if System.IO.FileExists(fn):continue
			return JS.Return(fn)
	}
	jsio["GetExecutablePath"]=function(JSContext JS){
		return JS.Return(System.Env.GetExecutablePath())
	}
	jsio["m_my_name"]=System.Env.GetExecutableName()
	jsio["GetStoragePath"]=function(JSContext JS){
		return JS.Return(System.Env.GetStoragePath())
	}
	/////////////
	if Platform.IS_WINDOWS:
		osal_DoFileDialogWin=__c_function(int,"osal_DoFileDialogWin","filedlg.h","c_files","filedlg.c")
		jsio["DoFileDialog"]=function(JSContext JS){
			//DoFileDialog(["Txtx documents (*.txtx)","*.txtx","All Files","*.*"],"txtx",0)
			filter_strs=JS.Param(0).as(JSObject)
			if !filter_strs:return 0
			n=filter_strs.length()
			if n&1||n<2:return 0
			s_def_ext=new(JS.Param(1).or(""))
			s_def_ext.push(char(0))
			s_filter=new string
			for i=0:2:n-2
				s_filter.push(filter_strs[i].or(""))
				s_filter.push(char(0))
				s_filter.push(filter_strs[i+1].or(""))
				s_filter.push(char(0))
			s_filter.push(char(0))
			ws_filter=Utf8ToUnicode(s_filter)
			ws_def_ext=Utf8ToUnicode(s_def_ext)
			is_save=JS.Param(2).or(0)
			///////////
			s_userdir=System.Env.ExpandEnvironmentStrings(string("%USERPROFILE%"))
			if !s_userdir.n||s_userdir[0]=='%':
				s_userdir=System.Env.ExpandEnvironmentStrings(string("%SystemDrive%%HOMEPATH%"))
			s_userdir.push("\\Documents")
			if !System.IO.DirExists(s_userdir):
				s_userdir=new(".")
			s_userdir.push('\\*')
			ws_userdir=Utf8ToUnicode(s_userdir)
			if ws_userdir.n<260:ws_userdir.resize(260)
			if !osal_DoFileDialogWin(ws_userdir,ws_filter,ws_def_ext,is_save):
				return 0
			s_ret=UnicodeToUtf8(ws_userdir)
			p=s_ret.IndexOf(char(0))
			if p>=0:s_ret.resize(p)
			return JS.Return(s_ret)
		}
	else
		//todo
	/////////////
	auto shellcmd(JSObject shell_args,int do_system)
		if !shell_args:
			return JS.ReturnError("invalid shell arguments - it must be an object")
		//properly quote the args
		n=shell_args.length()
		if !(n>0):
			return JS.ReturnError("invalid shell arguments - it must be an array object of positive length")
		scmd=new string
		for i=0:n-1
			s_args_i=shell_args[i].as(string)
			if Platform.IS_WINDOWS:
				if !i:s_args_i=s_args_i.Replace(["/","\\"])
			if s_args_i.IndexOf(' ')>=0:
				s_args_i="\""+genString(s_args_i)+"\""
			if i:scmd.push(' ')
			scmd.push(s_args_i)
		if do_system:
			scmd.push(char(0))
			return JS.Return(c_system(scmd))
		else
			return JS.Return(scmd)
	jsio["Shell"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,1)
	}
	jsio["ShellCmd"]=function(JSContext JS){
		auto shell_args=JS.Param(0).as(JSObject)
		return shellcmd(shell_args,0)
	}
	/////////////
	class CProcessWrapper
		System.Processes.CProcess proc
		JS_Read=function(JSContext JS){
			auto n=JS.Param(0).as(iptr)
			if proc.pipe.WouldBlock():return 0
			//line-based parsing? do it in JS
			s=proc.pipe.Read(n)
			return JS.Return(s)
		}
		JS_IsRunning=function(JSContext JS){
			return JS.Return(proc.isRunning())
		}
		JS_Terminate=function(JSContext JS){
			proc.Terminate()
			return 0
		}
		__JS_prototype=function(JSObject proto){
			proto.ExportMethod(this,"Read",JS_Read)
			proto.ExportMethod(this,"IsRunning",JS_IsRunning)
			proto.ExportMethod(this,"Terminate",JS_Terminate)
		}
	jsio["RunToolRedirected"]=function(JSContext JS){
		auto scmd=JS.Param(0).as(string)
		auto spath=JS.Param(1).or(".")
		auto show=JS.Param(2).or(1)
		pproc=System.Processes.RunPiped(scmd,spath,show,"new_job,output,error")
		if !pproc:
			return 0
		return JS.Return(new CProcessWrapper(){proc:pproc})
	}
	/////////////
	Duktape=JS.GetGlobal()["Duktape"]
	Duktape["__utf8_fromCharCode"]=function(JSContext JS){
		return JS.Return(System.Algorithm.Unicode32ToUtf8([JS.Param(0).or(0)]))
	}
	/////////////
	sbox.UIRunJS(JS,"res/main.js")
})()
